#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ Fandomon —á–µ—Ä–µ–∑ MQTT
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É paho-mqtt
–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip3 install paho-mqtt
"""

import paho.mqtt.client as mqtt
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MQTT –±—Ä–æ–∫–µ—Ä–∞
BROKER = "broker.hivemq.com"
PORT = 1883
COMMANDS_TOPIC = "fandomon/commands"
STATUS_TOPIC = "fandomon/status"
EVENTS_TOPIC = "fandomon/events"

# Callback —Ñ—É–Ω–∫—Ü–∏–∏
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {BROKER}:{PORT}")
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ–ø–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        client.subscribe(STATUS_TOPIC)
        client.subscribe(EVENTS_TOPIC)
        print(f"üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {STATUS_TOPIC} –∏ {EVENTS_TOPIC}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∫–æ–¥: {rc}")

def on_message(client, userdata, msg):
    print(f"\nüì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø–∏–∫ '{msg.topic}':")
    try:
        payload = json.loads(msg.payload.decode())
        print(json.dumps(payload, indent=2, ensure_ascii=False))
    except:
        print(msg.payload.decode())

def send_command(client, command_type, parameters=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ Fandomon"""
    command = {
        "command": command_type,
        "timestamp": int(time.time() * 1000)
    }
    if parameters:
        command["parameters"] = parameters

    payload = json.dumps(command)
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã {command_type}...")
    print(f"   –¢–æ–ø–∏–∫: {COMMANDS_TOPIC}")
    print(f"   Payload: {payload}")

    result = client.publish(COMMANDS_TOPIC, payload, qos=1)
    if result.rc == mqtt.MQTT_ERR_SUCCESS:
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.rc}")

    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (5 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(5)

def main():
    print("=" * 60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ Fandomon")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º MQTT –∫–ª–∏–µ–Ω—Ç
    client = mqtt.Client(client_id="fandomon_test_client")
    client.on_connect = on_connect
    client.on_message = on_message

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {BROKER}:{PORT}...")
    try:
        client.connect(BROKER, PORT, 60)
        client.loop_start()
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è

        while True:
            print("\n" + "=" * 60)
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("1. GET_STATUS - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
            print("2. FORCE_SYNC - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
            print("3. UPDATE_SETTINGS - –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("4. RESTART_FANDOMAT - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Fandomat")
            print("5. CLEAR_EVENTS - –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏—è")
            print("6. RESTART_FANDOMON - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Fandomon")
            print("0. –í—ã—Ö–æ–¥")
            print("=" * 60)

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (0-6): ").strip()

            if choice == "0":
                break
            elif choice == "1":
                send_command(client, "GET_STATUS")
            elif choice == "2":
                send_command(client, "FORCE_SYNC")
            elif choice == "3":
                print("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è UPDATE_SETTINGS:")
                interval = input("  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω—É—Ç—ã, Enter=–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
                status = input("  –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å—Ç–∞—Ç—É—Å–∞ (–º–∏–Ω—É—Ç—ã, Enter=–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()
                name = input("  –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (Enter=–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å): ").strip()

                params = {}
                if interval:
                    params["check_interval"] = interval
                if status:
                    params["status_interval"] = status
                if name:
                    params["device_name"] = name

                if params:
                    send_command(client, "UPDATE_SETTINGS", params)
                else:
                    print("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            elif choice == "4":
                confirm = input("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Fandomat? (yes/no): ").lower()
                if confirm == "yes":
                    send_command(client, "RESTART_FANDOMAT")
            elif choice == "5":
                confirm = input("‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –ë–î? (yes/no): ").lower()
                if confirm == "yes":
                    send_command(client, "CLEAR_EVENTS")
            elif choice == "6":
                confirm = input("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–º–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Fandomon? (yes/no): ").lower()
                if confirm == "yes":
                    send_command(client, "RESTART_FANDOMON")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        print("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞...")
        client.loop_stop()
        client.disconnect()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ")

if __name__ == "__main__":
    main()
